---
// Advanced Syntax Highlighter Component - Phase 3 Enhancement
// Provides professional code highlighting with copy functionality
interface Props {
  code: string;
  language?: string;
  title?: string;
  showLineNumbers?: boolean;
  highlightLines?: number[];
  maxHeight?: string;
  fileName?: string;
}

const { 
  code, 
  language = 'javascript', 
  title,
  showLineNumbers = true,
  highlightLines = [],
  maxHeight = 'none',
  fileName
} = Astro.props;

const codeId = `code-${Math.random().toString(36).substr(2, 9)}`;
const lines = code.trim().split('\n');
---

<div class="code-highlighter bg-gray-900 rounded-lg overflow-hidden border border-gray-700 mb-6">
  <!-- Header -->
  <div class="flex items-center justify-between px-4 py-2 bg-gray-800 border-b border-gray-700">
    <div class="flex items-center space-x-3">
      <!-- Language indicator -->
      <div class="flex items-center space-x-2">
        <div class="w-3 h-3 bg-red-500 rounded-full"></div>
        <div class="w-3 h-3 bg-yellow-500 rounded-full"></div>
        <div class="w-3 h-3 bg-green-500 rounded-full"></div>
      </div>
      <div class="text-sm text-gray-300">
        {fileName || title || `${language.charAt(0).toUpperCase() + language.slice(1)} Code`}
      </div>
    </div>
    
    <div class="flex items-center space-x-2">
      <button 
        class="copy-button text-sm text-gray-400 hover:text-white transition-colors px-2 py-1 rounded hover:bg-gray-700"
        data-code={code.trim()}
        title="Copy to clipboard"
      >
        <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
        </svg>
        Copy
      </button>
      {language && (
        <div class="text-xs text-gray-500 bg-gray-700 px-2 py-1 rounded">
          {language.toUpperCase()}
        </div>
      )}
    </div>
  </div>
  
  <!-- Code Content -->
  <div 
    class="relative overflow-x-auto"
    style={maxHeight !== 'none' ? `max-height: ${maxHeight}; overflow-y: auto;` : ''}
  >
    <pre class="text-sm"><code id={codeId} class={`language-${language} block p-4 ${showLineNumbers ? 'pl-12' : ''}`}>{code.trim()}</code></pre>
    
    <!-- Line Numbers -->
    {showLineNumbers && (
      <div class="absolute left-0 top-0 bottom-0 w-10 bg-gray-800 border-r border-gray-700 select-none">
        <div class="text-xs text-gray-500 p-4 leading-5 text-right">
          {lines.map((_, index) => (
            <div 
              class={`${highlightLines.includes(index + 1) ? 'text-yellow-400 font-bold' : ''}`}
            >
              {index + 1}
            </div>
          ))}
        </div>
      </div>
    )}
    
    <!-- Highlighted Lines Background -->
    {highlightLines.length > 0 && (
      <div class="absolute inset-0 pointer-events-none">
        {highlightLines.map(lineNum => (
          <div 
            class="absolute w-full bg-yellow-500 bg-opacity-10"
            style={`top: ${(lineNum - 1) * 20 + 16}px; height: 20px;`}
          ></div>
        ))}
      </div>
    )}
  </div>
  
  <!-- Copy Success Message -->
  <div 
    class="copy-success hidden absolute top-2 right-2 bg-green-500 text-white px-3 py-1 rounded text-sm"
  >
    Copied!
  </div>
</div>

<script>
  // Advanced Code Highlighter with Prism.js
  class CodeHighlighter {
    constructor() {
      this.loadPrism();
      this.setupCopyButtons();
    }
    
    async loadPrism() {
      // Load Prism.js CSS
      if (!document.querySelector('link[href*="prism"]')) {
        const cssLink = document.createElement('link');
        cssLink.rel = 'stylesheet';
        cssLink.href = 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-dark.min.css';
        document.head.appendChild(cssLink);
      }
      
      // Load Prism.js JavaScript
      if (typeof Prism === 'undefined') {
        await this.loadScript('https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js');
        await this.loadScript('https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js');
        
        // Configure Prism
        if (typeof Prism !== 'undefined') {
          Prism.plugins.autoloader.languages_path = 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/';
          
          // Highlight all code blocks
          setTimeout(() => {
            Prism.highlightAll();
          }, 100);
        }
      } else {
        Prism.highlightAll();
      }
    }
    
    async loadScript(src) {
      return new Promise((resolve, reject) => {
        if (document.querySelector(`script[src="${src}"]`)) {
          resolve();
          return;
        }
        
        const script = document.createElement('script');
        script.src = src;
        script.onload = resolve;
        script.onerror = reject;
        document.head.appendChild(script);
      });
    }
    
    setupCopyButtons() {
      const copyButtons = document.querySelectorAll('.copy-button');
      copyButtons.forEach(button => {
        button.addEventListener('click', async (e) => {
          const code = button.dataset.code;
          
          try {
            if (navigator.clipboard && window.isSecureContext) {
              await navigator.clipboard.writeText(code);
            } else {
              // Fallback for older browsers
              const textArea = document.createElement('textarea');
              textArea.value = code;
              textArea.style.position = 'fixed';
              textArea.style.left = '-999999px';
              textArea.style.top = '-999999px';
              document.body.appendChild(textArea);
              textArea.focus();
              textArea.select();
              document.execCommand('copy');
              textArea.remove();
            }
            
            this.showCopySuccess(button);
            
            // Track copy event
            if (typeof gtag !== 'undefined') {
              gtag('event', 'code_copy', {
                'event_category': 'engagement',
                'event_label': 'code_highlight',
                'value': 1
              });
            }
            
          } catch (err) {
            console.error('Failed to copy code:', err);
            this.showCopyError(button);
          }
        });
      });
    }
    
    showCopySuccess(button) {
      const originalText = button.innerHTML;
      button.innerHTML = `
        <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
        Copied!
      `;
      button.classList.add('text-green-400');
      
      setTimeout(() => {
        button.innerHTML = originalText;
        button.classList.remove('text-green-400');
      }, 2000);
    }
    
    showCopyError(button) {
      const originalText = button.innerHTML;
      button.innerHTML = `
        <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
        Failed
      `;
      button.classList.add('text-red-400');
      
      setTimeout(() => {
        button.innerHTML = originalText;
        button.classList.remove('text-red-400');
      }, 2000);
    }
  }
  
  // Initialize code highlighter when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new CodeHighlighter();
  });
  
  // Re-highlight when new code blocks are added dynamically
  document.addEventListener('codeBlockAdded', () => {
    if (typeof Prism !== 'undefined') {
      Prism.highlightAll();
    }
  });
</script>

<style>
  /* Custom styles for better code presentation */
  .code-highlighter pre[class*="language-"] {
    margin: 0;
    background: transparent;
    overflow: visible;
  }
  
  .code-highlighter code[class*="language-"] {
    background: transparent;
    font-family: 'Fira Code', 'JetBrains Mono', 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
    font-size: 0.875rem;
    line-height: 1.25rem;
    tab-size: 4;
  }
  
  /* Smooth scrolling for long code blocks */
  .code-highlighter div[style*="max-height"] {
    scrollbar-width: thin;
    scrollbar-color: #4B5563 #1F2937;
  }
  
  .code-highlighter div[style*="max-height"]::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }
  
  .code-highlighter div[style*="max-height"]::-webkit-scrollbar-track {
    background: #1F2937;
  }
  
  .code-highlighter div[style*="max-height"]::-webkit-scrollbar-thumb {
    background: #4B5563;
    border-radius: 4px;
  }
  
  .code-highlighter div[style*="max-height"]::-webkit-scrollbar-thumb:hover {
    background: #6B7280;
  }
</style>