---
// Related Posts Component - AI-powered content recommendations
import { getCollection } from 'astro:content';

interface Props {
  currentPost: {
    slug: string;
    data: {
      title: string;
      description: string;
      tags?: string[];
      category?: string;
    };
  };
  maxPosts?: number;
}

const { currentPost, maxPosts = 3 } = Astro.props;

// Get all blog posts
const allPosts = await getCollection('blog');

// AI-powered content similarity algorithm
function calculateSimilarity(post1: any, post2: any): number {
  let score = 0;
  
  // Tag similarity (weighted heavily)
  const tags1 = post1.data.tags || [];
  const tags2 = post2.data.tags || [];
  const commonTags = tags1.filter((tag: string) => tags2.includes(tag));
  score += (commonTags.length / Math.max(tags1.length, tags2.length, 1)) * 0.4;
  
  // Category similarity
  if (post1.data.category === post2.data.category) {
    score += 0.3;
  }
  
  // Title word similarity
  const words1 = post1.data.title.toLowerCase().split(/\s+/);
  const words2 = post2.data.title.toLowerCase().split(/\s+/);
  const commonWords = words1.filter((word: string) => 
    words2.includes(word) && word.length > 3
  );
  score += (commonWords.length / Math.max(words1.length, words2.length, 1)) * 0.2;
  
  // Description similarity (basic keyword matching)
  const desc1 = (post1.data.description || '').toLowerCase();
  const desc2 = (post2.data.description || '').toLowerCase();
  const descWords1 = desc1.split(/\s+/).filter((w: string) => w.length > 4);
  const descWords2 = desc2.split(/\s+/).filter((w: string) => w.length > 4);
  const commonDescWords = descWords1.filter((word: string) => desc2.includes(word));
  score += (commonDescWords.length / Math.max(descWords1.length, descWords2.length, 1)) * 0.1;
  
  return score;
}

// Find related posts
const relatedPosts = allPosts
  .filter(post => post.slug !== currentPost.slug)
  .map(post => ({
    ...post,
    similarity: calculateSimilarity(currentPost, post)
  }))
  .sort((a, b) => b.similarity - a.similarity)
  .slice(0, maxPosts)
  .filter(post => post.similarity > 0.1); // Minimum similarity threshold

// Format date function
function formatDate(date: Date): string {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
}
---

{relatedPosts.length > 0 && (
  <div class="related-posts bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl p-6 mt-12">
    <div class="flex items-center mb-6">
      <div class="flex items-center">
        <svg class="w-6 h-6 text-blue-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <h3 class="text-xl font-semibold text-gray-900">Related Research & Insights</h3>
      </div>
      <div class="ml-auto">
        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
          AI Recommended
        </span>
      </div>
    </div>
    
    <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
      {relatedPosts.map((post) => (
        <article class="bg-white rounded-lg border border-gray-200 p-4 hover:shadow-md transition-all duration-200 hover:border-blue-300 group">
          <div class="flex items-start justify-between mb-3">
            <div class="flex-1">
              <h4 class="font-medium text-gray-900 group-hover:text-blue-600 transition-colors line-clamp-2 mb-1">
                <a href={`/blog/${post.slug}/`} class="hover:underline">
                  {post.data.title}
                </a>
              </h4>
              
              {post.data.publishedAt && (
                <time class="text-sm text-gray-500" datetime={post.data.publishedAt.toISOString()}>
                  {formatDate(new Date(post.data.publishedAt))}
                </time>
              )}
            </div>
            
            <div class="ml-2 flex-shrink-0">
              <div class="w-8 h-8 bg-gradient-to-br from-blue-100 to-indigo-100 rounded-full flex items-center justify-center">
                <span class="text-xs font-semibold text-blue-600">
                  {Math.round(post.similarity * 100)}%
                </span>
              </div>
            </div>
          </div>
          
          {post.data.description && (
            <p class="text-sm text-gray-600 mb-3 line-clamp-2">
              {post.data.description}
            </p>
          )}
          
          {post.data.tags && post.data.tags.length > 0 && (
            <div class="flex flex-wrap gap-1 mb-3">
              {post.data.tags.slice(0, 3).map((tag: string) => (
                <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800">
                  {tag}
                </span>
              ))}
              {post.data.tags.length > 3 && (
                <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-500">
                  +{post.data.tags.length - 3}
                </span>
              )}
            </div>
          )}
          
          <div class="flex items-center text-sm text-blue-600 group-hover:text-blue-700 font-medium">
            <span>Read more</span>
            <svg class="w-4 h-4 ml-1 transform group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path>
            </svg>
          </div>
        </article>
      ))}
    </div>
    
    <div class="mt-4 text-center">
      <p class="text-xs text-gray-500">
        Recommendations powered by AI content analysis â€¢ 
        <span class="font-medium">{relatedPosts.length} related articles found</span>
      </p>
    </div>
  </div>
)}

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .related-posts {
    background-image: 
      radial-gradient(at 47% 33%, hsl(212, 100%, 97%) 0, transparent 59%), 
      radial-gradient(at 82% 65%, hsl(218, 100%, 98%) 0, transparent 55%);
  }
</style>