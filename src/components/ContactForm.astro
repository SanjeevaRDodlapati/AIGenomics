---
// Enhanced Contact Form Component - Phase 3 Interactive Features
// Includes form validation, submission handling, and user feedback
---

<section class="bg-white">
  <div class="max-w-2xl mx-auto">
    <form id="contact-form" class="space-y-6">
      <!-- Name Field -->
      <div>
        <label for="name" class="block text-sm font-medium text-gray-700 mb-2">
          Full Name <span class="text-red-500">*</span>
        </label>
        <input 
          type="text" 
          id="name" 
          name="name" 
          required 
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
          placeholder="Your full name"
        />
        <div class="error-message hidden mt-1 text-sm text-red-600"></div>
      </div>

      <!-- Email Field -->
      <div>
        <label for="email" class="block text-sm font-medium text-gray-700 mb-2">
          Email Address <span class="text-red-500">*</span>
        </label>
        <input 
          type="email" 
          id="email" 
          name="email" 
          required 
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
          placeholder="your.email@example.com"
        />
        <div class="error-message hidden mt-1 text-sm text-red-600"></div>
      </div>

      <!-- Subject Field -->
      <div>
        <label for="subject" class="block text-sm font-medium text-gray-700 mb-2">
          Subject <span class="text-red-500">*</span>
        </label>
        <select 
          id="subject" 
          name="subject" 
          required 
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
        >
          <option value="">Select a topic...</option>
          <option value="collaboration">Research Collaboration</option>
          <option value="consulting">Consulting Inquiry</option>
          <option value="speaking">Speaking Engagement</option>
          <option value="mentoring">Mentoring/Career Advice</option>
          <option value="general">General Question</option>
          <option value="other">Other</option>
        </select>
        <div class="error-message hidden mt-1 text-sm text-red-600"></div>
      </div>

      <!-- Message Field -->
      <div>
        <label for="message" class="block text-sm font-medium text-gray-700 mb-2">
          Message <span class="text-red-500">*</span>
        </label>
        <textarea 
          id="message" 
          name="message" 
          rows="6" 
          required 
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors resize-vertical"
          placeholder="Tell me about your project, question, or how I can help..."
        ></textarea>
        <div class="error-message hidden mt-1 text-sm text-red-600"></div>
        <div class="mt-1 text-sm text-gray-500">
          Characters: <span id="char-count">0</span>/500 (minimum 10 characters)
        </div>
      </div>

      <!-- Anti-spam Field (hidden) -->
      <div class="hidden">
        <label for="website">Leave this field empty</label>
        <input type="text" id="website" name="website" tabindex="-1" autocomplete="off" />
      </div>

      <!-- Submit Button -->
      <div class="flex items-center justify-between">
        <div class="text-sm text-gray-600">
          <span class="text-red-500">*</span> Required fields
        </div>
        <button 
          type="submit" 
          id="submit-btn"
          class="bg-blue-600 text-white py-3 px-8 rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
        >
          <span id="submit-text">Send Message</span>
          <svg id="submit-icon" class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
          </svg>
        </button>
      </div>
    </form>

    <!-- Success Message -->
    <div id="success-message" class="hidden mt-6 p-4 bg-green-50 border border-green-200 rounded-lg">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-green-800">Message sent successfully!</h3>
          <div class="mt-2 text-sm text-green-700">
            <p>Thank you for reaching out. I'll get back to you within 2-3 business days.</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Error Message -->
    <div id="error-message" class="hidden mt-6 p-4 bg-red-50 border border-red-200 rounded-lg">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-red-800">Error sending message</h3>
          <div class="mt-2 text-sm text-red-700">
            <p id="error-text">Please try again or contact me directly via email.</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Information Notice -->
    <div class="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-blue-800">Contact Information</h3>
          <div class="mt-2 text-sm text-blue-700">
            <p>For urgent inquiries, you can reach me directly at <a href="mailto:sdodl001@odu.edu" class="underline">sdodl001@odu.edu</a> or call <a href="tel:+17573641561" class="underline">+1-757-364-1561</a>.</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // Enhanced Contact Form with Phase 3 Interactive Features
  class ContactForm {
    constructor() {
      this.form = document.getElementById('contact-form');
      this.submitBtn = document.getElementById('submit-btn');
      this.submitText = document.getElementById('submit-text');
      this.submitIcon = document.getElementById('submit-icon');
      this.successMessage = document.getElementById('success-message');
      this.errorMessage = document.getElementById('error-message');
      this.errorText = document.getElementById('error-text');
      this.charCount = document.getElementById('char-count');
      
      this.setupEventListeners();
      this.setupValidation();
    }
    
    setupEventListeners() {
      // Form submission
      this.form.addEventListener('submit', (e) => this.handleSubmit(e));
      
      // Character counter for message field
      const messageField = document.getElementById('message');
      messageField.addEventListener('input', () => this.updateCharCount());
      
      // Real-time validation
      const fields = ['name', 'email', 'subject', 'message'];
      fields.forEach(field => {
        const element = document.getElementById(field);
        element.addEventListener('blur', () => this.validateField(field));
        element.addEventListener('input', () => this.clearFieldError(field));
      });
    }
    
    setupValidation() {
      // Email validation pattern
      this.emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      
      // Initial character count
      this.updateCharCount();
    }
    
    updateCharCount() {
      const messageField = document.getElementById('message');
      const count = messageField.value.length;
      this.charCount.textContent = count;
      
      // Color coding for character count
      if (count < 10) {
        this.charCount.className = 'text-red-500 font-medium';
      } else if (count > 450) {
        this.charCount.className = 'text-yellow-600 font-medium';
      } else {
        this.charCount.className = 'text-gray-500';
      }
    }
    
    validateField(fieldName) {
      const field = document.getElementById(fieldName);
      const value = field.value.trim();
      let isValid = true;
      let errorMessage = '';
      
      switch (fieldName) {
        case 'name':
          if (!value) {
            errorMessage = 'Name is required';
            isValid = false;
          } else if (value.length < 2) {
            errorMessage = 'Name must be at least 2 characters';
            isValid = false;
          }
          break;
          
        case 'email':
          if (!value) {
            errorMessage = 'Email is required';
            isValid = false;
          } else if (!this.emailPattern.test(value)) {
            errorMessage = 'Please enter a valid email address';
            isValid = false;
          }
          break;
          
        case 'subject':
          if (!value) {
            errorMessage = 'Please select a subject';
            isValid = false;
          }
          break;
          
        case 'message':
          if (!value) {
            errorMessage = 'Message is required';
            isValid = false;
          } else if (value.length < 10) {
            errorMessage = 'Message must be at least 10 characters';
            isValid = false;
          } else if (value.length > 500) {
            errorMessage = 'Message must be less than 500 characters';
            isValid = false;
          }
          break;
      }
      
      this.showFieldError(fieldName, isValid ? '' : errorMessage);
      return isValid;
    }
    
    showFieldError(fieldName, message) {
      const field = document.getElementById(fieldName);
      const errorElement = field.parentNode.querySelector('.error-message');
      
      if (message) {
        errorElement.textContent = message;
        errorElement.classList.remove('hidden');
        field.classList.add('border-red-500', 'focus:ring-red-500', 'focus:border-red-500');
        field.classList.remove('border-gray-300', 'focus:ring-blue-500', 'focus:border-blue-500');
      } else {
        errorElement.classList.add('hidden');
        field.classList.remove('border-red-500', 'focus:ring-red-500', 'focus:border-red-500');
        field.classList.add('border-gray-300', 'focus:ring-blue-500', 'focus:border-blue-500');
      }
    }
    
    clearFieldError(fieldName) {
      const field = document.getElementById(fieldName);
      const errorElement = field.parentNode.querySelector('.error-message');
      
      if (!errorElement.classList.contains('hidden')) {
        errorElement.classList.add('hidden');
        field.classList.remove('border-red-500', 'focus:ring-red-500', 'focus:border-red-500');
        field.classList.add('border-gray-300', 'focus:ring-blue-500', 'focus:border-blue-500');
      }
    }
    
    validateForm() {
      const fields = ['name', 'email', 'subject', 'message'];
      let isValid = true;
      
      fields.forEach(field => {
        if (!this.validateField(field)) {
          isValid = false;
        }
      });
      
      // Anti-spam check
      const honeypot = document.getElementById('website');
      if (honeypot.value) {
        isValid = false;
      }
      
      return isValid;
    }
    
    async handleSubmit(e) {
      e.preventDefault();
      
      // Hide previous messages
      this.hideMessages();
      
      // Validate form
      if (!this.validateForm()) {
        this.showError('Please correct the errors above and try again.');
        return;
      }
      
      // Show loading state
      this.setSubmitState(true);
      
      try {
        // Simulate form submission (replace with actual endpoint)
        await this.simulateSubmission();
        
        // Show success message
        this.showSuccess();
        this.form.reset();
        this.updateCharCount();
        
      } catch (error) {
        this.showError('Failed to send message. Please try again or contact me directly.');
      } finally {
        this.setSubmitState(false);
      }
    }
    
    async simulateSubmission() {
      // Simulate network delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // For now, always succeed (replace with actual form submission)
      // In production, you would send data to your form handler
      const formData = new FormData(this.form);
      console.log('Form submission (simulated):', Object.fromEntries(formData));
      
      return { success: true };
    }
    
    setSubmitState(isSubmitting) {
      this.submitBtn.disabled = isSubmitting;
      
      if (isSubmitting) {
        this.submitText.textContent = 'Sending...';
        this.submitIcon.innerHTML = '<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>';
      } else {
        this.submitText.textContent = 'Send Message';
        this.submitIcon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>';
      }
    }
    
    showSuccess() {
      this.successMessage.classList.remove('hidden');
      this.errorMessage.classList.add('hidden');
      
      // Scroll to success message
      this.successMessage.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
    
    showError(message) {
      this.errorText.textContent = message;
      this.errorMessage.classList.remove('hidden');
      this.successMessage.classList.add('hidden');
      
      // Scroll to error message
      this.errorMessage.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
    
    hideMessages() {
      this.successMessage.classList.add('hidden');
      this.errorMessage.classList.add('hidden');
    }
  }
  
  // Initialize contact form when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ContactForm();
  });
</script>